using System;
using UnityEngine;

[RequireComponent(typeof(Rigidbody2D))]
public class SkeletonMover : MonoBehaviour
{
    [Header("–¶–µ–ª—å –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–≤–∏–∂–µ–Ω–∏—è")]
    [SerializeField] private Transform _target;         
    [SerializeField] private float _maxSpeed = 3f;       
    [SerializeField] private float _maxForce = 1f;       
    [SerializeField] private float _arrivalDistance = 0.5f; 

    [Header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–æ–Ω—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è")]
    [SerializeField] private float _detectionRange = 5f;  // –†–∞–¥–∏—É—Å –≤–∏–¥–∏–º–æ—Å—Ç–∏ –≤—Ä–∞–≥–∞
    private bool _playerDetected = false; // –§–ª–∞–≥ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞

    [Header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–±—Ö–æ–¥–∞ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–π")]
    [SerializeField] private float _rayLength = 2f;       
    [SerializeField] private LayerMask _obstacleMask;     
    [SerializeField] private float _avoidMultiplier = 1f;  

    private Rigidbody2D _rb;

    public event Action<float> Moved;

    private void Awake()
    {
        _rb = GetComponent<Rigidbody2D>();
    }

    private void Update()
    {
        Moved?.Invoke(_rb.velocity.magnitude);
    }

    private void FixedUpdate()
    {
        if (_target == null)
        {
            Debug.LogWarning("üö® –í—Ä–∞–≥ –Ω–µ –¥–≤–∏–≥–∞–µ—Ç—Å—è: —Ü–µ–ª—å (_target) –Ω–µ –Ω–∞–∑–Ω–∞—á–µ–Ω–∞!", gameObject);
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –ª–∏ –∏–≥—Ä–æ–∫ –≤ –∑–æ–Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è
        float distanceToPlayer = Vector2.Distance(_target.position, _rb.position);
        _playerDetected = distanceToPlayer <= _detectionRange;

        if (!_playerDetected)
        {
            _rb.velocity = Vector2.zero; // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–≤–∏–∂–µ–Ω–∏–µ
            return;
        }

        // 1. –í—ã—á–∏—Å–ª—è–µ–º –≤–µ–∫—Ç–æ—Ä, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π –∫ —Ü–µ–ª–∏
        Vector2 desired = ((Vector2)_target.position - _rb.position);
        desired.Normalize();

        if (distanceToPlayer < _arrivalDistance)
        {
            desired *= (_maxSpeed * (distanceToPlayer / _arrivalDistance));
        }
        else
        {
            desired *= _maxSpeed;
        }

        // –û—Å–Ω–æ–≤–Ω–∞—è —É–ø—Ä–∞–≤–ª—è—é—â–∞—è —Å–∏–ª–∞ (steering)
        Vector2 steer = desired - _rb.velocity;
        steer = Vector2.ClampMagnitude(steer, _maxForce);

        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è –ø–µ—Ä–µ–¥ –≤—Ä–∞–≥–æ–º
        Vector2 rayDirection = _rb.velocity.normalized;
        if (rayDirection == Vector2.zero)
        {
            rayDirection = desired; // –ï—Å–ª–∏ –≤—Ä–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫ —Ü–µ–ª–∏
        }

        RaycastHit2D hit = Physics2D.Raycast(_rb.position, rayDirection, _rayLength, _obstacleMask);
        if (hit.collider != null)
        {
            Debug.Log("‚õî –í—Ä–∞–≥ –æ–±–Ω–∞—Ä—É–∂–∏–ª –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏–µ: " + hit.collider.name);
            Vector2 avoidForce = hit.normal * _avoidMultiplier;
            steer += avoidForce;
        }

        // –ü—Ä–∏–º–µ–Ω—è–µ–º —Å–∏–ª—É –∫ Rigidbody2D
        _rb.AddForce(steer, ForceMode2D.Force);

        // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        if (_rb.velocity.magnitude > _maxSpeed)
        {
            _rb.velocity = _rb.velocity.normalized * _maxSpeed;
        }
    }

    // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –∑–æ–Ω—ã –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
    private void OnDrawGizmosSelected()
    {
        if (_rb == null)
            return;

        // –†–∞–¥–∏—É—Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –∏–≥—Ä–æ–∫–∞
        Gizmos.color = Color.green;
        Gizmos.DrawWireSphere(transform.position, _detectionRange);

        if (_target == null)
            return;

        // –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–≤–∏–∂–µ–Ω–∏—è
        Gizmos.color = Color.red;
        Vector2 rayDirection = _rb.velocity.normalized;
        if (rayDirection == Vector2.zero)
        {
            rayDirection = (((Vector2)_target.position - _rb.position)).normalized;
        }
        Gizmos.DrawLine(transform.position, transform.position + (Vector3)(rayDirection * _rayLength));
    }
}
